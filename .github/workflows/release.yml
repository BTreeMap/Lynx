name: Release

on:
  release:
    types: [published]

jobs:
  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: lynx
            asset_name: lynx-linux-amd64
          - os: ubuntu-24.04-arm64
            target: aarch64-unknown-linux-gnu
            artifact_name: lynx
            asset_name: lynx-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: lynx
            asset_name: lynx-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: lynx
            asset_name: lynx-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: lynx.exe
            asset_name: lynx-windows-amd64.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build frontend
        run: |
          cd frontend
          npm install
          npm run build
          cd ..

      - name: Verify frontend build
        run: |
          if [ ! -d "frontend/dist" ]; then
            echo "ERROR: frontend/dist directory not found!"
            exit 1
          fi
          echo "Frontend dist contents:"
          ls -la frontend/dist/
          echo "Checking .dockerignore:"
          cat .dockerignore
          echo "Files in frontend directory:"
          ls -la frontend/

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        shell: bash

      - name: Rename binary
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            mv target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          else
            mv target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          fi
        shell: bash

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  set-env:
    runs-on: ubuntu-24.04
    outputs:
      DOCKER_IMAGE_NAME: ${{ steps.env_vars.outputs.DOCKER_IMAGE_NAME }}
      TAG_NAME: ${{ steps.env_vars.outputs.TAG_NAME }}
      SOURCE_DATE_EPOCH_VAR: ${{ steps.dates.outputs.SOURCE_DATE_EPOCH_VAR }}
    steps:
      - name: Set repository name and tag
        id: env_vars
        run: |
          echo "DOCKER_IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate date strings
        id: dates
        run: |
          now=$(date '+%s')
          year_month=$(date -u -d "@$now" '+%Y-%m')
          echo "SOURCE_DATE_EPOCH_VAR=$(date -u -d "${year_month}-01 00:00:00" '+%s')" >> $GITHUB_OUTPUT

  build-docker-release:
    needs: set-env
    permissions:
      contents: read
      packages: write
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            variant: amd64
            runner: ubuntu-24.04
          - platform: linux/arm64
            variant: arm64
            runner: ubuntu-24.04-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build frontend
        run: |
          cd frontend
          npm install
          npm run build
          cd ..

      - name: Verify frontend build
        run: |
          if [ ! -d "frontend/dist" ]; then
            echo "ERROR: frontend/dist directory not found!"
            exit 1
          fi
          echo "Frontend dist contents:"
          ls -la frontend/dist/
          echo "Checking .dockerignore:"
          cat .dockerignore
          echo "Files in frontend directory:"
          ls -la frontend/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ needs.set-env.outputs.DOCKER_IMAGE_NAME }}:${{ needs.set-env.outputs.TAG_NAME }}.${{ matrix.variant }}
          outputs: "type=registry,compression=zstd,force-compression=true,compression-level=3,rewrite-timestamp=true,oci-mediatypes=true"
        env:
          SOURCE_DATE_EPOCH: ${{ needs.set-env.outputs.SOURCE_DATE_EPOCH_VAR }}

  create-docker-manifest:
    needs: [set-env, build-docker-release]
    permissions:
      packages: write
    runs-on: ubuntu-24.04
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest list
        run: |
          # The platform-specific tags
          AMD64_TAG="${DOCKER_IMAGE_NAME}:${TAG_NAME}.amd64"
          ARM64_TAG="${DOCKER_IMAGE_NAME}:${TAG_NAME}.arm64"

          # Create manifest for the release tag
          docker buildx imagetools create \
            --tag "${DOCKER_IMAGE_NAME}:${TAG_NAME}" \
            "${AMD64_TAG}" "${ARM64_TAG}"
        env:
          DOCKER_IMAGE_NAME: ${{ needs.set-env.outputs.DOCKER_IMAGE_NAME }}
          TAG_NAME: ${{ needs.set-env.outputs.TAG_NAME }}
